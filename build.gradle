plugins {
    id 'java'
}

group 'de.dercompiler'
version '1.0'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

// Lock all dependencies for reproducible builds
dependencyLocking {
    lockAllConfigurations()
}

tasks.register('resolveAndLockAll') {
    doFirst {
        assert gradle.startParameter.writeDependencyLocks
    }
    doLast {
        configurations.findAll {
            // Add any custom filtering on the configurations to be resolved
            it.canBeResolved
        }.each { it.resolve() }
    }
}

dependencies {

    implementation 'commons-cli:commons-cli:1.5.0'
    // https://mvnrepository.com/artifact/com.diogonunes/JColor
    implementation 'com.diogonunes:JColor:5.2.0'

    implementation 'com.github.Firmwehr:jFirm:5b0164832e9c2fe71fd62c607e1ab2e2c7a69f64'
    implementation 'net.java.dev.jna:jna:4.5.2!!'

    implementation 'org.jgrapht:jgrapht-core:1.5.1'
    implementation 'org.jgrapht:jgrapht-io:1.5.1'


    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

compileJava {
    options.incremental = true
    options.fork = true
    options.failOnError = false
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }

    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

jar {
    manifest {
        attributes(
                'Class-Path': configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { it.name }.join(' '),
                'Main-Class': 'de.dercompiler.Compiler'
        )
    }
    from configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    archiveFileName = 'DerCompiler.jar'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
    useJUnitPlatform()
}

buildDir = "out"
sourceCompatibility = "17.PREVIEW"
targetCompatibility = "17.PREVIEW"
